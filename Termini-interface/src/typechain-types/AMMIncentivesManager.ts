/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export declare namespace Diamond {
  export type InitializationStruct = {
    initContract: AddressLike;
    initData: BytesLike;
  };

  export type InitializationStructOutput = [
    initContract: string,
    initData: string
  ] & { initContract: string; initData: string };
}

export declare namespace AMMIncentivesManagerFacet {
  export type AssetRewardStruct = {
    rewardToken: AddressLike;
    claimable: BigNumberish;
  };

  export type AssetRewardStructOutput = [
    rewardToken: string,
    claimable: bigint
  ] & { rewardToken: string; claimable: bigint };

  export type AssetClaimableStruct = {
    asset: AddressLike;
    rewards: AMMIncentivesManagerFacet.AssetRewardStruct[];
  };

  export type AssetClaimableStructOutput = [
    asset: string,
    rewards: AMMIncentivesManagerFacet.AssetRewardStructOutput[]
  ] & {
    asset: string;
    rewards: AMMIncentivesManagerFacet.AssetRewardStructOutput[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export interface AMMIncentivesManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "activateEmergencyMode"
      | "addOperator"
      | "admin"
      | "deactivateEmergencyMode"
      | "isEmergencyModeActive"
      | "owner"
      | "pause"
      | "paused"
      | "removeOperator"
      | "setAdmin"
      | "transferOwnership"
      | "unpause"
      | "getAMMFactory"
      | "setAMMFactory"
      | "WETH"
      | "claimableAssetsRewards"
      | "configAssets"
      | "configAssetsETH"
      | "createIncentives"
      | "createMultiIncentives"
      | "getAllIncentivesByAsset"
      | "getCreateStakedAMMFee"
      | "getFeeTo"
      | "getIncentivesFactory"
      | "getIncentivesFeeRate"
      | "getIncentivesOf"
      | "getTreasury"
      | "harvest"
      | "harvestMulti"
      | "initialize"
      | "resetIncentivesForAsset"
      | "setCreateStakedAMMFee"
      | "setFeeTo"
      | "setIncentivesFactory"
      | "setIncentivesFeeRate"
      | "setTreasury"
      | "createStakedToken"
      | "getAllStakedAMM"
      | "getStakedFactory"
      | "getStakedToken"
      | "setStakedFactory"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminTransferred"
      | "OperatorsUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "FactoryUpdated"
      | "IncentivesCreated"
      | "StakedAMMCreated"
      | "DiamondCut"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergencyModeActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAMMFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAMMFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimableAssetsRewards",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configAssets",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "configAssetsETH",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncentives",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMultiIncentives",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllIncentivesByAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateStakedAMMFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFeeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIncentivesFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentivesFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentivesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestMulti",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetIncentivesForAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreateStakedAMMFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStakedToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStakedAMM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakedFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCut.FacetCutStruct[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergencyModeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAMMFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAMMFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableAssetsRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configAssetsETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMultiIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllIncentivesByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateStakedAMMFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetIncentivesForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreateStakedAMMFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStakedAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakedFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AdminTransferredEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorsUpdatedEvent {
  export type InputTuple = [operator: AddressLike, action: BigNumberish];
  export type OutputTuple = [operator: string, action: bigint];
  export interface OutputObject {
    operator: string;
    action: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryUpdatedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncentivesCreatedEvent {
  export type InputTuple = [rewardToken: AddressLike, incentives: AddressLike];
  export type OutputTuple = [rewardToken: string, incentives: string];
  export interface OutputObject {
    rewardToken: string;
    incentives: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedAMMCreatedEvent {
  export type InputTuple = [pool: AddressLike, stakeToken: AddressLike];
  export type OutputTuple = [pool: string, stakeToken: string];
  export interface OutputObject {
    pool: string;
    stakeToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiamondCutEvent {
  export type InputTuple = [
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: AddressLike,
    _calldata: BytesLike
  ];
  export type OutputTuple = [
    _diamondCut: IDiamondCut.FacetCutStructOutput[],
    _init: string,
    _calldata: string
  ];
  export interface OutputObject {
    _diamondCut: IDiamondCut.FacetCutStructOutput[];
    _init: string;
    _calldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AMMIncentivesManager extends BaseContract {
  connect(runner?: ContractRunner | null): AMMIncentivesManager;
  waitForDeployment(): Promise<this>;

  interface: AMMIncentivesManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activateEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  addOperator: TypedContractMethod<
    [_newOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  deactivateEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  isEmergencyModeActive: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeOperator: TypedContractMethod<
    [toRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getAMMFactory: TypedContractMethod<[], [string], "view">;

  setAMMFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  WETH: TypedContractMethod<[], [string], "view">;

  claimableAssetsRewards: TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [AMMIncentivesManagerFacet.AssetClaimableStructOutput[]],
    "view"
  >;

  configAssets: TypedContractMethod<
    [rewardToken: AddressLike, assets: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  configAssetsETH: TypedContractMethod<
    [assets: AddressLike[], amounts: BigNumberish[]],
    [void],
    "payable"
  >;

  createIncentives: TypedContractMethod<
    [rewardToken: AddressLike],
    [string],
    "nonpayable"
  >;

  createMultiIncentives: TypedContractMethod<
    [rewardTokens: AddressLike[]],
    [string[]],
    "nonpayable"
  >;

  getAllIncentivesByAsset: TypedContractMethod<
    [asset: AddressLike],
    [string[]],
    "view"
  >;

  getCreateStakedAMMFee: TypedContractMethod<[], [bigint], "view">;

  getFeeTo: TypedContractMethod<[], [string], "view">;

  getIncentivesFactory: TypedContractMethod<[], [string], "view">;

  getIncentivesFeeRate: TypedContractMethod<[], [bigint], "view">;

  getIncentivesOf: TypedContractMethod<
    [rewardToken: AddressLike],
    [string],
    "view"
  >;

  getTreasury: TypedContractMethod<[], [string], "view">;

  harvest: TypedContractMethod<
    [asset: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  harvestMulti: TypedContractMethod<
    [assets: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[weth: AddressLike], [void], "nonpayable">;

  resetIncentivesForAsset: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  setCreateStakedAMMFee: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeTo: TypedContractMethod<[feeTo: AddressLike], [void], "nonpayable">;

  setIncentivesFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setIncentivesFeeRate: TypedContractMethod<
    [feeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  createStakedToken: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "payable"
  >;

  getAllStakedAMM: TypedContractMethod<[], [string[]], "view">;

  getStakedFactory: TypedContractMethod<[], [string], "view">;

  getStakedToken: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;

  setStakedFactory: TypedContractMethod<
    [stakedFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  diamondCut: TypedContractMethod<
    [
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  facetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[_newOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isEmergencyModeActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[toRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAMMFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAMMFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimableAssetsRewards"
  ): TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [AMMIncentivesManagerFacet.AssetClaimableStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "configAssets"
  ): TypedContractMethod<
    [rewardToken: AddressLike, assets: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configAssetsETH"
  ): TypedContractMethod<
    [assets: AddressLike[], amounts: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncentives"
  ): TypedContractMethod<[rewardToken: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createMultiIncentives"
  ): TypedContractMethod<
    [rewardTokens: AddressLike[]],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllIncentivesByAsset"
  ): TypedContractMethod<[asset: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreateStakedAMMFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIncentivesFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIncentivesFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIncentivesOf"
  ): TypedContractMethod<[rewardToken: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<
    [asset: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "harvestMulti"
  ): TypedContractMethod<
    [assets: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[weth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetIncentivesForAsset"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCreateStakedAMMFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeTo"
  ): TypedContractMethod<[feeTo: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncentivesFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncentivesFeeRate"
  ): TypedContractMethod<[feeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createStakedToken"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllStakedAMM"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStakedFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStakedToken"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setStakedFactory"
  ): TypedContractMethod<[stakedFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diamondCut"
  ): TypedContractMethod<
    [
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdminTransferred"
  ): TypedContractEvent<
    AdminTransferredEvent.InputTuple,
    AdminTransferredEvent.OutputTuple,
    AdminTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OperatorsUpdated"
  ): TypedContractEvent<
    OperatorsUpdatedEvent.InputTuple,
    OperatorsUpdatedEvent.OutputTuple,
    OperatorsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "FactoryUpdated"
  ): TypedContractEvent<
    FactoryUpdatedEvent.InputTuple,
    FactoryUpdatedEvent.OutputTuple,
    FactoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IncentivesCreated"
  ): TypedContractEvent<
    IncentivesCreatedEvent.InputTuple,
    IncentivesCreatedEvent.OutputTuple,
    IncentivesCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StakedAMMCreated"
  ): TypedContractEvent<
    StakedAMMCreatedEvent.InputTuple,
    StakedAMMCreatedEvent.OutputTuple,
    StakedAMMCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DiamondCut"
  ): TypedContractEvent<
    DiamondCutEvent.InputTuple,
    DiamondCutEvent.OutputTuple,
    DiamondCutEvent.OutputObject
  >;

  filters: {
    "AdminTransferred(address,address)": TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;
    AdminTransferred: TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;

    "OperatorsUpdated(address,uint8)": TypedContractEvent<
      OperatorsUpdatedEvent.InputTuple,
      OperatorsUpdatedEvent.OutputTuple,
      OperatorsUpdatedEvent.OutputObject
    >;
    OperatorsUpdated: TypedContractEvent<
      OperatorsUpdatedEvent.InputTuple,
      OperatorsUpdatedEvent.OutputTuple,
      OperatorsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "FactoryUpdated(address)": TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;
    FactoryUpdated: TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;

    "IncentivesCreated(address,address)": TypedContractEvent<
      IncentivesCreatedEvent.InputTuple,
      IncentivesCreatedEvent.OutputTuple,
      IncentivesCreatedEvent.OutputObject
    >;
    IncentivesCreated: TypedContractEvent<
      IncentivesCreatedEvent.InputTuple,
      IncentivesCreatedEvent.OutputTuple,
      IncentivesCreatedEvent.OutputObject
    >;

    "StakedAMMCreated(address,address)": TypedContractEvent<
      StakedAMMCreatedEvent.InputTuple,
      StakedAMMCreatedEvent.OutputTuple,
      StakedAMMCreatedEvent.OutputObject
    >;
    StakedAMMCreated: TypedContractEvent<
      StakedAMMCreatedEvent.InputTuple,
      StakedAMMCreatedEvent.OutputTuple,
      StakedAMMCreatedEvent.OutputObject
    >;

    "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
    DiamondCut: TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
  };
}
