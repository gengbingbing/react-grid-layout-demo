/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AirdropReward {
  export type RewardInfoStruct = {
    epoch: BigNumberish;
    epochEnd: BigNumberish;
    acquireMethod: BigNumberish;
    merkleRoot: BytesLike;
    merklePath: string;
    totalDistributed: BigNumberish;
    remainDistributed: BigNumberish;
    balanceUpdatedAt: BigNumberish;
    rootUpdatedAt: BigNumberish;
    token: AddressLike;
    mintToken: AddressLike;
  };

  export type RewardInfoStructOutput = [
    epoch: bigint,
    epochEnd: bigint,
    acquireMethod: bigint,
    merkleRoot: string,
    merklePath: string,
    totalDistributed: bigint,
    remainDistributed: bigint,
    balanceUpdatedAt: bigint,
    rootUpdatedAt: bigint,
    token: string,
    mintToken: string
  ] & {
    epoch: bigint;
    epochEnd: bigint;
    acquireMethod: bigint;
    merkleRoot: string;
    merklePath: string;
    totalDistributed: bigint;
    remainDistributed: bigint;
    balanceUpdatedAt: bigint;
    rootUpdatedAt: bigint;
    token: string;
    mintToken: string;
  };
}

export interface AirdropRewardAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimReward"
      | "claims"
      | "getLastEpochReward"
      | "getRewardForEpoch"
      | "initialize"
      | "lastEpochs"
      | "multisigWallet"
      | "owner"
      | "pause"
      | "paused"
      | "proposalAuthority"
      | "proposerMerkleRoot"
      | "receiveMintTokenReward"
      | "receiveReward"
      | "receiveTokenReward"
      | "renounceOwnership"
      | "rewardInfos"
      | "rewardSponsor"
      | "setMultisigWallet"
      | "setProposalAuthority"
      | "setRewardSponsor"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimReward"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "Transfer"
      | "Unpaused"
      | "UpdateMerkleRoot"
      | "UpdateReward"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastEpochReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multisigWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposerMerkleRoot",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMintTokenReward",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTokenReward",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardInfos",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSponsor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisigWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardSponsor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastEpochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multisigWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposerMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMintTokenReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokenReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisigWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace ClaimRewardEvent {
  export type InputTuple = [
    rewardId: BigNumberish,
    epoch: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    totalClaimed: BigNumberish
  ];
  export type OutputTuple = [
    rewardId: bigint,
    epoch: bigint,
    recipient: string,
    amount: bigint,
    timestamp: bigint,
    totalClaimed: bigint
  ];
  export interface OutputObject {
    rewardId: bigint;
    epoch: bigint;
    recipient: string;
    amount: bigint;
    timestamp: bigint;
    totalClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    rewardId: BigNumberish,
    epoch: BigNumberish,
    amount: BigNumberish,
    recipient: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardId: bigint,
    epoch: bigint,
    amount: bigint,
    recipient: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardId: bigint;
    epoch: bigint;
    amount: bigint;
    recipient: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMerkleRootEvent {
  export type InputTuple = [
    rewardId: BigNumberish,
    epoch: BigNumberish,
    epochEnd: BigNumberish,
    oldRoot: BytesLike,
    newRoot: BytesLike,
    timestamp: BigNumberish,
    merklePath: string
  ];
  export type OutputTuple = [
    rewardId: bigint,
    epoch: bigint,
    epochEnd: bigint,
    oldRoot: string,
    newRoot: string,
    timestamp: bigint,
    merklePath: string
  ];
  export interface OutputObject {
    rewardId: bigint;
    epoch: bigint;
    epochEnd: bigint;
    oldRoot: string;
    newRoot: string;
    timestamp: bigint;
    merklePath: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRewardEvent {
  export type InputTuple = [
    rewardId: BigNumberish,
    epoch: BigNumberish,
    acquireMethod: BigNumberish,
    amount: BigNumberish,
    balance: BigNumberish,
    totalDistributed: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardId: bigint,
    epoch: bigint,
    acquireMethod: bigint,
    amount: bigint,
    balance: bigint,
    totalDistributed: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardId: bigint;
    epoch: bigint;
    acquireMethod: bigint;
    amount: bigint;
    balance: bigint;
    totalDistributed: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropRewardAbi extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropRewardAbi;
  waitForDeployment(): Promise<this>;

  interface: AirdropRewardAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimReward: TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  claims: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, bigint] & { amount: bigint; timestamp: bigint }],
    "view"
  >;

  getLastEpochReward: TypedContractMethod<
    [rewardId: BigNumberish],
    [AirdropReward.RewardInfoStructOutput],
    "view"
  >;

  getRewardForEpoch: TypedContractMethod<
    [rewardId: BigNumberish, epoch: BigNumberish],
    [[bigint, bigint] & { claimed: bigint; totalClaimed: bigint }],
    "view"
  >;

  initialize: TypedContractMethod<
    [_proposalAuthority: AddressLike, _rewardSponsor: AddressLike],
    [void],
    "nonpayable"
  >;

  lastEpochs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  multisigWallet: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proposalAuthority: TypedContractMethod<[], [string], "view">;

  proposerMerkleRoot: TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      epochEnd: BigNumberish,
      _merkleRoot: BytesLike,
      _merklePath: string
    ],
    [void],
    "nonpayable"
  >;

  receiveMintTokenReward: TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      mintTokenAddress: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  receiveReward: TypedContractMethod<
    [rewardId: BigNumberish, epoch: BigNumberish],
    [void],
    "payable"
  >;

  receiveTokenReward: TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      from: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardInfos: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        epoch: bigint;
        epochEnd: bigint;
        acquireMethod: bigint;
        merkleRoot: string;
        merklePath: string;
        totalDistributed: bigint;
        remainDistributed: bigint;
        balanceUpdatedAt: bigint;
        rootUpdatedAt: bigint;
        token: string;
        mintToken: string;
      }
    ],
    "view"
  >;

  rewardSponsor: TypedContractMethod<[], [string], "view">;

  setMultisigWallet: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  setProposalAuthority: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardSponsor: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, bigint] & { amount: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastEpochReward"
  ): TypedContractMethod<
    [rewardId: BigNumberish],
    [AirdropReward.RewardInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardForEpoch"
  ): TypedContractMethod<
    [rewardId: BigNumberish, epoch: BigNumberish],
    [[bigint, bigint] & { claimed: bigint; totalClaimed: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_proposalAuthority: AddressLike, _rewardSponsor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastEpochs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "multisigWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposerMerkleRoot"
  ): TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      epochEnd: BigNumberish,
      _merkleRoot: BytesLike,
      _merklePath: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveMintTokenReward"
  ): TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      mintTokenAddress: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveReward"
  ): TypedContractMethod<
    [rewardId: BigNumberish, epoch: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "receiveTokenReward"
  ): TypedContractMethod<
    [
      rewardId: BigNumberish,
      epoch: BigNumberish,
      from: AddressLike,
      tokenAddress: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        epoch: bigint;
        epochEnd: bigint;
        acquireMethod: bigint;
        merkleRoot: string;
        merklePath: string;
        totalDistributed: bigint;
        remainDistributed: bigint;
        balanceUpdatedAt: bigint;
        rootUpdatedAt: bigint;
        token: string;
        mintToken: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardSponsor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMultisigWallet"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProposalAuthority"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardSponsor"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimReward"
  ): TypedContractEvent<
    ClaimRewardEvent.InputTuple,
    ClaimRewardEvent.OutputTuple,
    ClaimRewardEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMerkleRoot"
  ): TypedContractEvent<
    UpdateMerkleRootEvent.InputTuple,
    UpdateMerkleRootEvent.OutputTuple,
    UpdateMerkleRootEvent.OutputObject
  >;
  getEvent(
    key: "UpdateReward"
  ): TypedContractEvent<
    UpdateRewardEvent.InputTuple,
    UpdateRewardEvent.OutputTuple,
    UpdateRewardEvent.OutputObject
  >;

  filters: {
    "ClaimReward(uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;
    ClaimReward: TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Transfer(uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateMerkleRoot(uint256,uint256,uint256,bytes32,bytes32,uint256,string)": TypedContractEvent<
      UpdateMerkleRootEvent.InputTuple,
      UpdateMerkleRootEvent.OutputTuple,
      UpdateMerkleRootEvent.OutputObject
    >;
    UpdateMerkleRoot: TypedContractEvent<
      UpdateMerkleRootEvent.InputTuple,
      UpdateMerkleRootEvent.OutputTuple,
      UpdateMerkleRootEvent.OutputObject
    >;

    "UpdateReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdateRewardEvent.InputTuple,
      UpdateRewardEvent.OutputTuple,
      UpdateRewardEvent.OutputObject
    >;
    UpdateReward: TypedContractEvent<
      UpdateRewardEvent.InputTuple,
      UpdateRewardEvent.OutputTuple,
      UpdateRewardEvent.OutputObject
    >;
  };
}
