/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DepositUtils {
  export type CreateDepositParamsStruct = {
    receiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    market: AddressLike;
    initialLongToken: AddressLike;
    initialShortToken: AddressLike;
    longTokenSwapPath: AddressLike[];
    shortTokenSwapPath: AddressLike[];
    minMarketTokens: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateDepositParamsStructOutput = [
    receiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    market: string,
    initialLongToken: string,
    initialShortToken: string,
    longTokenSwapPath: string[],
    shortTokenSwapPath: string[],
    minMarketTokens: bigint,
    shouldUnwrapNativeToken: boolean,
    executionFee: bigint,
    callbackGasLimit: bigint
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minMarketTokens: bigint;
    shouldUnwrapNativeToken: boolean;
    executionFee: bigint;
    callbackGasLimit: bigint;
  };
}

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    market: AddressLike;
    initialCollateralToken: AddressLike;
    swapPath: AddressLike[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    receiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    market: string,
    initialCollateralToken: string,
    swapPath: string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: BigNumberish;
    initialCollateralDeltaAmount: BigNumberish;
    triggerPrice: BigNumberish;
    acceptablePrice: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
    minOutputAmount: BigNumberish;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    sizeDeltaUsd: bigint,
    initialCollateralDeltaAmount: bigint,
    triggerPrice: bigint,
    acceptablePrice: bigint,
    executionFee: bigint,
    callbackGasLimit: bigint,
    minOutputAmount: bigint
  ] & {
    sizeDeltaUsd: bigint;
    initialCollateralDeltaAmount: bigint;
    triggerPrice: bigint;
    acceptablePrice: bigint;
    executionFee: bigint;
    callbackGasLimit: bigint;
    minOutputAmount: bigint;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: BigNumberish;
    decreasePositionSwapType: BigNumberish;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    referralCode: BytesLike;
  };

  export type CreateOrderParamsStructOutput = [
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    orderType: bigint,
    decreasePositionSwapType: bigint,
    isLong: boolean,
    shouldUnwrapNativeToken: boolean,
    referralCode: string
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: bigint;
    decreasePositionSwapType: bigint;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    referralCode: string;
  };
}

export declare namespace WithdrawalUtils {
  export type CreateWithdrawalParamsStruct = {
    receiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    market: AddressLike;
    longTokenSwapPath: AddressLike[];
    shortTokenSwapPath: AddressLike[];
    minLongTokenAmount: BigNumberish;
    minShortTokenAmount: BigNumberish;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
  };

  export type CreateWithdrawalParamsStructOutput = [
    receiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    market: string,
    longTokenSwapPath: string[],
    shortTokenSwapPath: string[],
    minLongTokenAmount: bigint,
    minShortTokenAmount: bigint,
    shouldUnwrapNativeToken: boolean,
    executionFee: bigint,
    callbackGasLimit: bigint
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: bigint;
    minShortTokenAmount: bigint;
    shouldUnwrapNativeToken: boolean;
    executionFee: bigint;
    callbackGasLimit: bigint;
  };
}

export declare namespace Price {
  export type PropsStruct = { min: BigNumberish; max: BigNumberish };

  export type PropsStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };
}

export declare namespace OracleUtils {
  export type SimulatePricesParamsStruct = {
    primaryTokens: AddressLike[];
    primaryPrices: Price.PropsStruct[];
  };

  export type SimulatePricesParamsStructOutput = [
    primaryTokens: string[],
    primaryPrices: Price.PropsStructOutput[]
  ] & { primaryTokens: string[]; primaryPrices: Price.PropsStructOutput[] };
}

export interface ExchangeRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelDeposit"
      | "cancelOrder"
      | "cancelWithdrawal"
      | "claimAffiliateRewards"
      | "claimCollateral"
      | "claimFundingFees"
      | "claimUiFees"
      | "createDeposit"
      | "createOrder"
      | "createWithdrawal"
      | "dataStore"
      | "depositHandler"
      | "eventEmitter"
      | "multicall"
      | "orderHandler"
      | "roleStore"
      | "router"
      | "sendNativeToken"
      | "sendTokens"
      | "sendWnt"
      | "setSavedCallbackContract"
      | "setUiFeeFactor"
      | "simulateExecuteDeposit"
      | "simulateExecuteOrder"
      | "simulateExecuteWithdrawal"
      | "updateOrder"
      | "withdrawalHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAffiliateRewards",
    values: [AddressLike[], AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [AddressLike[], AddressLike[], BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFundingFees",
    values: [AddressLike[], AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUiFees",
    values: [AddressLike[], AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [DepositUtils.CreateDepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [IBaseOrderUtils.CreateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawal",
    values: [WithdrawalUtils.CreateWithdrawalParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "orderHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendNativeToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendWnt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSavedCallbackContract",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUiFeeFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteDeposit",
    values: [BytesLike, OracleUtils.SimulatePricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteOrder",
    values: [BytesLike, OracleUtils.SimulatePricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteWithdrawal",
    values: [BytesLike, OracleUtils.SimulatePricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAffiliateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFundingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUiFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendWnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSavedCallbackContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUiFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalHandler",
    data: BytesLike
  ): Result;
}

export interface ExchangeRouter extends BaseContract {
  connect(runner?: ContractRunner | null): ExchangeRouter;
  waitForDeployment(): Promise<this>;

  interface: ExchangeRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelDeposit: TypedContractMethod<[key: BytesLike], [void], "payable">;

  cancelOrder: TypedContractMethod<[key: BytesLike], [void], "payable">;

  cancelWithdrawal: TypedContractMethod<[key: BytesLike], [void], "payable">;

  claimAffiliateRewards: TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;

  claimCollateral: TypedContractMethod<
    [
      markets: AddressLike[],
      tokens: AddressLike[],
      timeKeys: BigNumberish[],
      receiver: AddressLike
    ],
    [bigint[]],
    "payable"
  >;

  claimFundingFees: TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;

  claimUiFees: TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;

  createDeposit: TypedContractMethod<
    [params: DepositUtils.CreateDepositParamsStruct],
    [string],
    "payable"
  >;

  createOrder: TypedContractMethod<
    [params: IBaseOrderUtils.CreateOrderParamsStruct],
    [string],
    "payable"
  >;

  createWithdrawal: TypedContractMethod<
    [params: WithdrawalUtils.CreateWithdrawalParamsStruct],
    [string],
    "payable"
  >;

  dataStore: TypedContractMethod<[], [string], "view">;

  depositHandler: TypedContractMethod<[], [string], "view">;

  eventEmitter: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  orderHandler: TypedContractMethod<[], [string], "view">;

  roleStore: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  sendNativeToken: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  sendTokens: TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  sendWnt: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  setSavedCallbackContract: TypedContractMethod<
    [market: AddressLike, callbackContract: AddressLike],
    [void],
    "payable"
  >;

  setUiFeeFactor: TypedContractMethod<
    [uiFeeFactor: BigNumberish],
    [void],
    "payable"
  >;

  simulateExecuteDeposit: TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;

  simulateExecuteOrder: TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;

  simulateExecuteWithdrawal: TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;

  updateOrder: TypedContractMethod<
    [
      key: BytesLike,
      sizeDeltaUsd: BigNumberish,
      acceptablePrice: BigNumberish,
      triggerPrice: BigNumberish,
      minOutputAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  withdrawalHandler: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelDeposit"
  ): TypedContractMethod<[key: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[key: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelWithdrawal"
  ): TypedContractMethod<[key: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "claimAffiliateRewards"
  ): TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimCollateral"
  ): TypedContractMethod<
    [
      markets: AddressLike[],
      tokens: AddressLike[],
      timeKeys: BigNumberish[],
      receiver: AddressLike
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimFundingFees"
  ): TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimUiFees"
  ): TypedContractMethod<
    [markets: AddressLike[], tokens: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createDeposit"
  ): TypedContractMethod<
    [params: DepositUtils.CreateDepositParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [params: IBaseOrderUtils.CreateOrderParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createWithdrawal"
  ): TypedContractMethod<
    [params: WithdrawalUtils.CreateWithdrawalParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "dataStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventEmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "orderHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendNativeToken"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendTokens"
  ): TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendWnt"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setSavedCallbackContract"
  ): TypedContractMethod<
    [market: AddressLike, callbackContract: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setUiFeeFactor"
  ): TypedContractMethod<[uiFeeFactor: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "simulateExecuteDeposit"
  ): TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "simulateExecuteOrder"
  ): TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "simulateExecuteWithdrawal"
  ): TypedContractMethod<
    [
      key: BytesLike,
      simulatedOracleParams: OracleUtils.SimulatePricesParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateOrder"
  ): TypedContractMethod<
    [
      key: BytesLike,
      sizeDeltaUsd: BigNumberish,
      acceptablePrice: BigNumberish,
      triggerPrice: BigNumberish,
      minOutputAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawalHandler"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
