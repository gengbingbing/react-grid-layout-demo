/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TokenConfigStruct = {
  tokenContract: AddressLike;
  name: string;
  symbol: string;
  decimals: BigNumberish;
  capAmount: BigNumberish;
};

export type TokenConfigStructOutput = [
  tokenContract: string,
  name: string,
  symbol: string,
  decimals: bigint,
  capAmount: bigint
] & {
  tokenContract: string;
  name: string;
  symbol: string;
  decimals: bigint;
  capAmount: bigint;
};

export interface FaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountAmount"
      | "claim"
      | "claimFaucetToken"
      | "claimedAccounts"
      | "claimedAmounts"
      | "claimedTokenAmount"
      | "claimedTokenAmounts"
      | "claimedTokens"
      | "disableFaucet"
      | "enableFaucet"
      | "gov"
      | "maxAmounts"
      | "mint"
      | "setDropletAmount"
      | "setGov"
      | "setTokenConfig"
      | "tokenLength"
      | "tokenList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFaucetToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAmounts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTokenAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTokenAmounts",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableFaucet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableFaucet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDropletAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenList", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFaucetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFaucet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableFaucet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDropletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
}

export interface Faucet extends BaseContract {
  connect(runner?: ContractRunner | null): Faucet;
  waitForDeployment(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountAmount: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimFaucetToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimedAccounts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  claimedAmounts: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  claimedTokenAmount: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  claimedTokenAmounts: TypedContractMethod<
    [_tokens: AddressLike[]],
    [bigint[]],
    "view"
  >;

  claimedTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenContract: string;
        name: string;
        symbol: string;
        decimals: bigint;
        capAmount: bigint;
      }
    ],
    "view"
  >;

  disableFaucet: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  enableFaucet: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  maxAmounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [_token: AddressLike, _account: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setDropletAmount: TypedContractMethod<
    [_token: AddressLike, _dropletAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setTokenConfig: TypedContractMethod<
    [_tokenConfig: TokenConfigStruct],
    [void],
    "nonpayable"
  >;

  tokenLength: TypedContractMethod<[], [bigint], "view">;

  tokenList: TypedContractMethod<[], [TokenConfigStructOutput[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFaucetToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimedAccounts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimedAmounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimedTokenAmount"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimedTokenAmounts"
  ): TypedContractMethod<[_tokens: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "claimedTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenContract: string;
        name: string;
        symbol: string;
        decimals: bigint;
        capAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "disableFaucet"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableFaucet"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxAmounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_token: AddressLike, _account: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDropletAmount"
  ): TypedContractMethod<
    [_token: AddressLike, _dropletAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenConfig"
  ): TypedContractMethod<
    [_tokenConfig: TokenConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenList"
  ): TypedContractMethod<[], [TokenConfigStructOutput[]], "view">;

  filters: {};
}
