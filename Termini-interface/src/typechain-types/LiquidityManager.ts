/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "addLiquidityForAccount"
      | "cooldownDuration"
      | "dataBase"
      | "eventLogger"
      | "getAssets"
      | "getAumInUsdg"
      | "gov"
      | "initialize"
      | "isHandler"
      | "isInitialized"
      | "lastAddedAt"
      | "removeLiquidity"
      | "removeLiquidityForAccount"
      | "roleBase"
      | "setGov"
      | "setHandler"
      | "setVaultHandler"
      | "usdg"
      | "vaultHandler"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "UpdateGov" | "UpdateHandler"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityForAccount",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dataBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventLogger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssets",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAumInUsdg",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAddedAt",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityForAccount",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "roleBase", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventLogger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAumInUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAddedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultHandler",
    data: BytesLike
  ): Result;
}

export namespace UpdateGovEvent {
  export type InputTuple = [gov: AddressLike];
  export type OutputTuple = [gov: string];
  export interface OutputObject {
    gov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateHandlerEvent {
  export type InputTuple = [handler: AddressLike, isActive: boolean];
  export type OutputTuple = [handler: string, isActive: boolean];
  export interface OutputObject {
    handler: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: LiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  addLiquidityForAccount: TypedContractMethod<
    [
      _fundingAccount: AddressLike,
      _account: AddressLike,
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  cooldownDuration: TypedContractMethod<[], [bigint], "view">;

  dataBase: TypedContractMethod<[], [string], "view">;

  eventLogger: TypedContractMethod<[], [string], "view">;

  getAssets: TypedContractMethod<
    [_poolToken: AddressLike, _maximize: boolean],
    [[string[], bigint[]]],
    "view"
  >;

  getAumInUsdg: TypedContractMethod<
    [_poolToken: AddressLike, _maximize: boolean],
    [bigint],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[_usdg: AddressLike], [void], "nonpayable">;

  isHandler: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  lastAddedAt: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _tokenOut: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  removeLiquidityForAccount: TypedContractMethod<
    [
      _account: AddressLike,
      _poolToken: AddressLike,
      _tokenOut: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  roleBase: TypedContractMethod<[], [string], "view">;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setHandler: TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setVaultHandler: TypedContractMethod<
    [_vaultHandler: AddressLike],
    [void],
    "nonpayable"
  >;

  usdg: TypedContractMethod<[], [string], "view">;

  vaultHandler: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityForAccount"
  ): TypedContractMethod<
    [
      _fundingAccount: AddressLike,
      _account: AddressLike,
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cooldownDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataBase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventLogger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAssets"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _maximize: boolean],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAumInUsdg"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _maximize: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_usdg: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isHandler"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAddedAt"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _tokenOut: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityForAccount"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _poolToken: AddressLike,
      _tokenOut: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleBase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultHandler"
  ): TypedContractMethod<[_vaultHandler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultHandler"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "UpdateGov"
  ): TypedContractEvent<
    UpdateGovEvent.InputTuple,
    UpdateGovEvent.OutputTuple,
    UpdateGovEvent.OutputObject
  >;
  getEvent(
    key: "UpdateHandler"
  ): TypedContractEvent<
    UpdateHandlerEvent.InputTuple,
    UpdateHandlerEvent.OutputTuple,
    UpdateHandlerEvent.OutputObject
  >;

  filters: {
    "UpdateGov(address)": TypedContractEvent<
      UpdateGovEvent.InputTuple,
      UpdateGovEvent.OutputTuple,
      UpdateGovEvent.OutputObject
    >;
    UpdateGov: TypedContractEvent<
      UpdateGovEvent.InputTuple,
      UpdateGovEvent.OutputTuple,
      UpdateGovEvent.OutputObject
    >;

    "UpdateHandler(address,bool)": TypedContractEvent<
      UpdateHandlerEvent.InputTuple,
      UpdateHandlerEvent.OutputTuple,
      UpdateHandlerEvent.OutputObject
    >;
    UpdateHandler: TypedContractEvent<
      UpdateHandlerEvent.InputTuple,
      UpdateHandlerEvent.OutputTuple,
      UpdateHandlerEvent.OutputObject
    >;
  };
}
