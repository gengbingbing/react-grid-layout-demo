/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StableCoinLiquidityRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "cancelDeposit"
      | "cancelWithdrawal"
      | "checkBuffer"
      | "createDeposit"
      | "createDepositETH"
      | "createWithdrawal"
      | "createWithdrawalETH"
      | "depositIndex"
      | "depositRequestKeys"
      | "depositRequestKeysStart"
      | "depositRequests"
      | "ethTransferGasLimit"
      | "executeDeposit"
      | "executeDeposits"
      | "executeWithdrawal"
      | "executeWithdrawals"
      | "getRequestKey"
      | "getRequestQueueLengths"
      | "gov"
      | "isLiquidityKeeper"
      | "lpManager"
      | "maxTimeDelay"
      | "minBlockDelayKeeper"
      | "minExecutionFee"
      | "minTimeDelayPublic"
      | "oracle"
      | "priceFeeds"
      | "setAdmin"
      | "setCheckBuffer"
      | "setDelayValues"
      | "setGov"
      | "setLiquidityKeeper"
      | "setLpManager"
      | "setMinExecutionFee"
      | "setOracle"
      | "setPriceFeeds"
      | "setPricesAndExecute"
      | "weth"
      | "withdrawalIndex"
      | "withdrawalRequestKeys"
      | "withdrawalRequestKeysStart"
      | "withdrawalRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelDeposit"
      | "CancelWithdrawal"
      | "CreateDeposit"
      | "CreateWithdrawal"
      | "ExecuteDeposit"
      | "ExecuteWithdrawal"
      | "SetAdmin"
      | "SetDelayValues"
      | "SetLiquidityKeeper"
      | "SetLiquidityManager"
      | "SetMinExecutionFee"
      | "SetOracle"
      | "StakeLp"
      | "UnstakeGlp"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelDeposit",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createDepositETH",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawal",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawalETH",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDeposit",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDeposits",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawal",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawals",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isLiquidityKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lpManager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCheckBuffer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setLiquidityKeeper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLpManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeeds",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesAndExecute",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawalIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequests",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDepositETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawalETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCheckBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricesAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequests",
    data: BytesLike
  ): Result;
}

export namespace CancelDepositEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    minUsdg: BigNumberish,
    minLp: BigNumberish,
    executionFee: BigNumberish,
    hasCollateralInETH: boolean,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    token: string,
    amount: bigint,
    minUsdg: bigint,
    minLp: bigint,
    executionFee: bigint,
    hasCollateralInETH: boolean,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
    minUsdg: bigint;
    minLp: bigint;
    executionFee: bigint;
    hasCollateralInETH: boolean;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelWithdrawalEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    lpAmount: BigNumberish,
    minOut: BigNumberish,
    receiver: AddressLike,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    token: string,
    lpAmount: bigint,
    minOut: bigint,
    receiver: string,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    token: string;
    lpAmount: bigint;
    minOut: bigint;
    receiver: string;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDepositEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    minUsdg: BigNumberish,
    minLp: BigNumberish,
    executionFee: BigNumberish,
    hasCollateralInETH: boolean,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish,
    gasPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    token: string,
    amount: bigint,
    minUsdg: bigint,
    minLp: bigint,
    executionFee: bigint,
    hasCollateralInETH: boolean,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint,
    gasPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    token: string;
    amount: bigint;
    minUsdg: bigint;
    minLp: bigint;
    executionFee: bigint;
    hasCollateralInETH: boolean;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
    gasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateWithdrawalEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    token: AddressLike,
    lpAmount: BigNumberish,
    minOut: BigNumberish,
    receiver: AddressLike,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish,
    gasPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    token: string,
    lpAmount: bigint,
    minOut: bigint,
    receiver: string,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint,
    gasPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    token: string;
    lpAmount: bigint;
    minOut: bigint;
    receiver: string;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
    gasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteDepositEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    lpAmount: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    token: string,
    amount: bigint,
    lpAmount: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    token: string;
    amount: bigint;
    lpAmount: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteWithdrawalEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    token: AddressLike,
    lpAmount: BigNumberish,
    minOut: BigNumberish,
    receiver: AddressLike,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    token: string,
    lpAmount: bigint,
    minOut: bigint,
    receiver: string,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    token: string;
    lpAmount: bigint;
    minOut: bigint;
    receiver: string;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDelayValuesEvent {
  export type InputTuple = [
    minBlockDelayKeeper: BigNumberish,
    minTimeDelayPublic: BigNumberish,
    maxTimeDelay: BigNumberish
  ];
  export type OutputTuple = [
    minBlockDelayKeeper: bigint,
    minTimeDelayPublic: bigint,
    maxTimeDelay: bigint
  ];
  export interface OutputObject {
    minBlockDelayKeeper: bigint;
    minTimeDelayPublic: bigint;
    maxTimeDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLiquidityKeeperEvent {
  export type InputTuple = [account: AddressLike, isActive: boolean];
  export type OutputTuple = [account: string, isActive: boolean];
  export interface OutputObject {
    account: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLiquidityManagerEvent {
  export type InputTuple = [lpManager: AddressLike];
  export type OutputTuple = [lpManager: string];
  export interface OutputObject {
    lpManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinExecutionFeeEvent {
  export type InputTuple = [minExecutionFee: BigNumberish];
  export type OutputTuple = [minExecutionFee: bigint];
  export interface OutputObject {
    minExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeLpEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeGlpEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StableCoinLiquidityRouter extends BaseContract {
  connect(runner?: ContractRunner | null): StableCoinLiquidityRouter;
  waitForDeployment(): Promise<this>;

  interface: StableCoinLiquidityRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  cancelDeposit: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelWithdrawal: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  checkBuffer: TypedContractMethod<[], [boolean], "view">;

  createDeposit: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;

  createDepositETH: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;

  createWithdrawal: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;

  createWithdrawalETH: TypedContractMethod<
    [
      _poolToken: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;

  depositIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  depositRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  depositRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  depositRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        account: string;
        poolToken: string;
        token: string;
        amount: bigint;
        minUsdg: bigint;
        minLp: bigint;
        executionFee: bigint;
        hasCollateralInETH: boolean;
        blockNumber: bigint;
        blockTime: bigint;
      }
    ],
    "view"
  >;

  ethTransferGasLimit: TypedContractMethod<[], [bigint], "view">;

  executeDeposit: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeDeposits: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeWithdrawal: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeWithdrawals: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getRequestKey: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;

  getRequestQueueLengths: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  isLiquidityKeeper: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  lpManager: TypedContractMethod<[], [string], "view">;

  maxTimeDelay: TypedContractMethod<[], [bigint], "view">;

  minBlockDelayKeeper: TypedContractMethod<[], [bigint], "view">;

  minExecutionFee: TypedContractMethod<[], [bigint], "view">;

  minTimeDelayPublic: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  priceFeeds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setCheckBuffer: TypedContractMethod<
    [_isCheck: boolean],
    [void],
    "nonpayable"
  >;

  setDelayValues: TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setLiquidityKeeper: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setLpManager: TypedContractMethod<
    [_lpManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinExecutionFee: TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  setPriceFeeds: TypedContractMethod<
    [_priceFeeds: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setPricesAndExecute: TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: BigNumberish[],
      _endIndexForDeposits: BigNumberish,
      _endIndexForWithdrawals: BigNumberish,
      _maxDeposits: BigNumberish,
      _maxWithdrawals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawalIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawalRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  withdrawalRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  withdrawalRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        account: string;
        poolToken: string;
        token: string;
        lpAmount: bigint;
        minOut: bigint;
        receiver: string;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelDeposit"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelWithdrawal"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBuffer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "createDeposit"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createDepositETH"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _minUsdg: BigNumberish,
      _minLp: BigNumberish,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createWithdrawal"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _token: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createWithdrawalETH"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _lpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike,
      _executionFee: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "depositRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        account: string;
        poolToken: string;
        token: string;
        amount: bigint;
        minUsdg: bigint;
        minLp: bigint;
        executionFee: bigint;
        hasCollateralInETH: boolean;
        blockNumber: bigint;
        blockTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ethTransferGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeDeposit"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDeposits"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithdrawal"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithdrawals"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRequestKey"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestQueueLengths"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isLiquidityKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lpManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxTimeDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBlockDelayKeeper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minExecutionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimeDelayPublic"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCheckBuffer"
  ): TypedContractMethod<[_isCheck: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelayValues"
  ): TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityKeeper"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLpManager"
  ): TypedContractMethod<[_lpManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinExecutionFee"
  ): TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceFeeds"
  ): TypedContractMethod<[_priceFeeds: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPricesAndExecute"
  ): TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: BigNumberish[],
      _endIndexForDeposits: BigNumberish,
      _endIndexForWithdrawals: BigNumberish,
      _maxDeposits: BigNumberish,
      _maxWithdrawals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawalIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawalRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawalRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawalRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        account: string;
        poolToken: string;
        token: string;
        lpAmount: bigint;
        minOut: bigint;
        receiver: string;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CancelDeposit"
  ): TypedContractEvent<
    CancelDepositEvent.InputTuple,
    CancelDepositEvent.OutputTuple,
    CancelDepositEvent.OutputObject
  >;
  getEvent(
    key: "CancelWithdrawal"
  ): TypedContractEvent<
    CancelWithdrawalEvent.InputTuple,
    CancelWithdrawalEvent.OutputTuple,
    CancelWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "CreateDeposit"
  ): TypedContractEvent<
    CreateDepositEvent.InputTuple,
    CreateDepositEvent.OutputTuple,
    CreateDepositEvent.OutputObject
  >;
  getEvent(
    key: "CreateWithdrawal"
  ): TypedContractEvent<
    CreateWithdrawalEvent.InputTuple,
    CreateWithdrawalEvent.OutputTuple,
    CreateWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteDeposit"
  ): TypedContractEvent<
    ExecuteDepositEvent.InputTuple,
    ExecuteDepositEvent.OutputTuple,
    ExecuteDepositEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteWithdrawal"
  ): TypedContractEvent<
    ExecuteWithdrawalEvent.InputTuple,
    ExecuteWithdrawalEvent.OutputTuple,
    ExecuteWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetDelayValues"
  ): TypedContractEvent<
    SetDelayValuesEvent.InputTuple,
    SetDelayValuesEvent.OutputTuple,
    SetDelayValuesEvent.OutputObject
  >;
  getEvent(
    key: "SetLiquidityKeeper"
  ): TypedContractEvent<
    SetLiquidityKeeperEvent.InputTuple,
    SetLiquidityKeeperEvent.OutputTuple,
    SetLiquidityKeeperEvent.OutputObject
  >;
  getEvent(
    key: "SetLiquidityManager"
  ): TypedContractEvent<
    SetLiquidityManagerEvent.InputTuple,
    SetLiquidityManagerEvent.OutputTuple,
    SetLiquidityManagerEvent.OutputObject
  >;
  getEvent(
    key: "SetMinExecutionFee"
  ): TypedContractEvent<
    SetMinExecutionFeeEvent.InputTuple,
    SetMinExecutionFeeEvent.OutputTuple,
    SetMinExecutionFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetOracle"
  ): TypedContractEvent<
    SetOracleEvent.InputTuple,
    SetOracleEvent.OutputTuple,
    SetOracleEvent.OutputObject
  >;
  getEvent(
    key: "StakeLp"
  ): TypedContractEvent<
    StakeLpEvent.InputTuple,
    StakeLpEvent.OutputTuple,
    StakeLpEvent.OutputObject
  >;
  getEvent(
    key: "UnstakeGlp"
  ): TypedContractEvent<
    UnstakeGlpEvent.InputTuple,
    UnstakeGlpEvent.OutputTuple,
    UnstakeGlpEvent.OutputObject
  >;

  filters: {
    "CancelDeposit(address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256)": TypedContractEvent<
      CancelDepositEvent.InputTuple,
      CancelDepositEvent.OutputTuple,
      CancelDepositEvent.OutputObject
    >;
    CancelDeposit: TypedContractEvent<
      CancelDepositEvent.InputTuple,
      CancelDepositEvent.OutputTuple,
      CancelDepositEvent.OutputObject
    >;

    "CancelWithdrawal(address,address,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      CancelWithdrawalEvent.InputTuple,
      CancelWithdrawalEvent.OutputTuple,
      CancelWithdrawalEvent.OutputObject
    >;
    CancelWithdrawal: TypedContractEvent<
      CancelWithdrawalEvent.InputTuple,
      CancelWithdrawalEvent.OutputTuple,
      CancelWithdrawalEvent.OutputObject
    >;

    "CreateDeposit(address,address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateDepositEvent.InputTuple,
      CreateDepositEvent.OutputTuple,
      CreateDepositEvent.OutputObject
    >;
    CreateDeposit: TypedContractEvent<
      CreateDepositEvent.InputTuple,
      CreateDepositEvent.OutputTuple,
      CreateDepositEvent.OutputObject
    >;

    "CreateWithdrawal(address,address,address,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateWithdrawalEvent.InputTuple,
      CreateWithdrawalEvent.OutputTuple,
      CreateWithdrawalEvent.OutputObject
    >;
    CreateWithdrawal: TypedContractEvent<
      CreateWithdrawalEvent.InputTuple,
      CreateWithdrawalEvent.OutputTuple,
      CreateWithdrawalEvent.OutputObject
    >;

    "ExecuteDeposit(address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteDepositEvent.InputTuple,
      ExecuteDepositEvent.OutputTuple,
      ExecuteDepositEvent.OutputObject
    >;
    ExecuteDeposit: TypedContractEvent<
      ExecuteDepositEvent.InputTuple,
      ExecuteDepositEvent.OutputTuple,
      ExecuteDepositEvent.OutputObject
    >;

    "ExecuteWithdrawal(address,address,address,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteWithdrawalEvent.InputTuple,
      ExecuteWithdrawalEvent.OutputTuple,
      ExecuteWithdrawalEvent.OutputObject
    >;
    ExecuteWithdrawal: TypedContractEvent<
      ExecuteWithdrawalEvent.InputTuple,
      ExecuteWithdrawalEvent.OutputTuple,
      ExecuteWithdrawalEvent.OutputObject
    >;

    "SetAdmin(address)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetDelayValues(uint256,uint256,uint256)": TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;
    SetDelayValues: TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;

    "SetLiquidityKeeper(address,bool)": TypedContractEvent<
      SetLiquidityKeeperEvent.InputTuple,
      SetLiquidityKeeperEvent.OutputTuple,
      SetLiquidityKeeperEvent.OutputObject
    >;
    SetLiquidityKeeper: TypedContractEvent<
      SetLiquidityKeeperEvent.InputTuple,
      SetLiquidityKeeperEvent.OutputTuple,
      SetLiquidityKeeperEvent.OutputObject
    >;

    "SetLiquidityManager(address)": TypedContractEvent<
      SetLiquidityManagerEvent.InputTuple,
      SetLiquidityManagerEvent.OutputTuple,
      SetLiquidityManagerEvent.OutputObject
    >;
    SetLiquidityManager: TypedContractEvent<
      SetLiquidityManagerEvent.InputTuple,
      SetLiquidityManagerEvent.OutputTuple,
      SetLiquidityManagerEvent.OutputObject
    >;

    "SetMinExecutionFee(uint256)": TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;
    SetMinExecutionFee: TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;

    "SetOracle(address)": TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;
    SetOracle: TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;

    "StakeLp(address,uint256)": TypedContractEvent<
      StakeLpEvent.InputTuple,
      StakeLpEvent.OutputTuple,
      StakeLpEvent.OutputObject
    >;
    StakeLp: TypedContractEvent<
      StakeLpEvent.InputTuple,
      StakeLpEvent.OutputTuple,
      StakeLpEvent.OutputObject
    >;

    "UnstakeGlp(address,uint256)": TypedContractEvent<
      UnstakeGlpEvent.InputTuple,
      UnstakeGlpEvent.OutputTuple,
      UnstakeGlpEvent.OutputObject
    >;
    UnstakeGlp: TypedContractEvent<
      UnstakeGlpEvent.InputTuple,
      UnstakeGlpEvent.OutputTuple,
      UnstakeGlpEvent.OutputObject
    >;
  };
}
