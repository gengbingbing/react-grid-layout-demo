/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PositionRouter {
  export type DecreasePositionRequestInStruct = {
    poolToken: AddressLike;
    path: AddressLike[];
    indexToken: AddressLike;
    collateralDelta: BigNumberish;
    sizeDelta: BigNumberish;
    isLong: boolean;
    receiver: AddressLike;
    acceptablePrice: BigNumberish;
    minOut: BigNumberish;
    executionFee: BigNumberish;
    withdrawETH: boolean;
  };

  export type DecreasePositionRequestInStructOutput = [
    poolToken: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    withdrawETH: boolean
  ] & {
    poolToken: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    withdrawETH: boolean;
  };

  export type IncreasePositionRequestInStruct = {
    account: AddressLike;
    poolToken: AddressLike;
    path: AddressLike[];
    indexToken: AddressLike;
    amountIn: BigNumberish;
    minOut: BigNumberish;
    sizeDelta: BigNumberish;
    isLong: boolean;
    acceptablePrice: BigNumberish;
    executionFee: BigNumberish;
    referralCode: BytesLike;
    callbackTarget: AddressLike;
  };

  export type IncreasePositionRequestInStructOutput = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    referralCode: string,
    callbackTarget: string
  ] & {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    referralCode: string;
    callbackTarget: string;
  };
}

export declare namespace PriceLib {
  export type PricesStruct = { min: BigNumberish; max: BigNumberish };

  export type PricesStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };
}

export interface StableCoinPositionRouterV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "callbackGasLimit"
      | "cancelDecreasePosition"
      | "cancelIncreasePosition"
      | "createDecreasePosition"
      | "createIncreasePositionTpSl"
      | "customCallbackGasLimits"
      | "dataBase"
      | "decreasePositionHandler"
      | "decreasePositionRequestKeys"
      | "decreasePositionRequestKeysStart"
      | "decreasePositionRequests"
      | "decreasePositionsIndex"
      | "depositFee"
      | "ethTransferGasLimit"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "getRequestKey"
      | "getRequestQueueLengths"
      | "gov"
      | "increasePositionBufferBps"
      | "increasePositionHandler"
      | "increasePositionRequestKeys"
      | "increasePositionRequestKeysStart"
      | "increasePositionRequests"
      | "increasePositionsIndex"
      | "isLeverageEnabled"
      | "isMulticaller"
      | "isPositionKeeper"
      | "maxGlobalLongSize"
      | "maxGlobalShortSize"
      | "maxTimeDelay"
      | "minBlockDelayKeeper"
      | "minExecutionFee"
      | "minTimeDelayPublic"
      | "oracle"
      | "referralStorage"
      | "setAdmin"
      | "setDataBase"
      | "setDecreasePositionHandler"
      | "setDelayValues"
      | "setGov"
      | "setIncreasePositionHandler"
      | "setMinExecutionFee"
      | "setMulticaller"
      | "setOracle"
      | "setPositionKeeper"
      | "setPricesAndExecute"
      | "setPricesMMAndExecute"
      | "setReferralStorage"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Callback"
      | "CancelDecreasePosition"
      | "CancelIncreasePosition"
      | "CreateDecreasePosition"
      | "CreateIncreasePosition"
      | "ExecuteDecreasePosition"
      | "ExecuteIncreasePosition"
      | "IncreasePoolAmount"
      | "InvalidIncreaseEvent"
      | "SetAdmin"
      | "SetDataBase"
      | "SetDecreasePositionHandler"
      | "SetDelayValues"
      | "SetIncreasePositionHandler"
      | "SetMinExecutionFee"
      | "SetMulticaller"
      | "SetOracle"
      | "SetPositionKeeper"
      | "SetReferralStorage"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [PositionRouter.DecreasePositionRequestInStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionTpSl",
    values: [PositionRouter.IncreasePositionRequestInStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "customCallbackGasLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dataBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreasePositionHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMulticaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataBase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecreasePositionHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMulticaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionKeeper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesAndExecute",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesMMAndExecute",
    values: [
      AddressLike[],
      PriceLib.PricesStruct[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionTpSl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customCallbackGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMulticaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDataBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecreasePositionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMulticaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricesAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricesMMAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace CallbackEvent {
  export type InputTuple = [
    callbackTarget: AddressLike,
    success: boolean,
    callbackGasLimit: BigNumberish
  ];
  export type OutputTuple = [
    callbackTarget: string,
    success: boolean,
    callbackGasLimit: bigint
  ];
  export interface OutputObject {
    callbackTarget: string;
    success: boolean;
    callbackGasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish,
    gasPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint,
    gasPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
    gasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    poolToken: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    poolToken: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    poolToken: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasePoolAmountEvent {
  export type InputTuple = [
    poolToken: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [poolToken: string, token: string, amount: bigint];
  export interface OutputObject {
    poolToken: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvalidIncreaseEventEvent {
  export type InputTuple = [
    poolToken: AddressLike,
    token: AddressLike,
    balance: BigNumberish,
    nextPoolAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolToken: string,
    token: string,
    balance: bigint,
    nextPoolAmount: bigint
  ];
  export interface OutputObject {
    poolToken: string;
    token: string;
    balance: bigint;
    nextPoolAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDataBaseEvent {
  export type InputTuple = [dataBase: AddressLike];
  export type OutputTuple = [dataBase: string];
  export interface OutputObject {
    dataBase: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDecreasePositionHandlerEvent {
  export type InputTuple = [positionHandler: AddressLike];
  export type OutputTuple = [positionHandler: string];
  export interface OutputObject {
    positionHandler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDelayValuesEvent {
  export type InputTuple = [
    minBlockDelayKeeper: BigNumberish,
    minTimeDelayPublic: BigNumberish,
    maxTimeDelay: BigNumberish
  ];
  export type OutputTuple = [
    minBlockDelayKeeper: bigint,
    minTimeDelayPublic: bigint,
    maxTimeDelay: bigint
  ];
  export interface OutputObject {
    minBlockDelayKeeper: bigint;
    minTimeDelayPublic: bigint;
    maxTimeDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIncreasePositionHandlerEvent {
  export type InputTuple = [positionHandler: AddressLike];
  export type OutputTuple = [positionHandler: string];
  export interface OutputObject {
    positionHandler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinExecutionFeeEvent {
  export type InputTuple = [minExecutionFee: BigNumberish];
  export type OutputTuple = [minExecutionFee: bigint];
  export interface OutputObject {
    minExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMulticallerEvent {
  export type InputTuple = [account: AddressLike, isActive: boolean];
  export type OutputTuple = [account: string, isActive: boolean];
  export interface OutputObject {
    account: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPositionKeeperEvent {
  export type InputTuple = [account: AddressLike, isActive: boolean];
  export type OutputTuple = [account: string, isActive: boolean];
  export interface OutputObject {
    account: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReferralStorageEvent {
  export type InputTuple = [referralStorage: AddressLike];
  export type OutputTuple = [referralStorage: string];
  export interface OutputObject {
    referralStorage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StableCoinPositionRouterV2 extends BaseContract {
  connect(runner?: ContractRunner | null): StableCoinPositionRouterV2;
  waitForDeployment(): Promise<this>;

  interface: StableCoinPositionRouterV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  cancelDecreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelIncreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  createDecreasePosition: TypedContractMethod<
    [_decRequestIn: PositionRouter.DecreasePositionRequestInStruct],
    [string],
    "payable"
  >;

  createIncreasePositionTpSl: TypedContractMethod<
    [_incRequestIn: PositionRouter.IncreasePositionRequestInStruct],
    [string],
    "payable"
  >;

  customCallbackGasLimits: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  dataBase: TypedContractMethod<[], [string], "view">;

  decreasePositionHandler: TypedContractMethod<[], [string], "view">;

  decreasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  decreasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  decreasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        poolToken: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
      }
    ],
    "view"
  >;

  decreasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  depositFee: TypedContractMethod<[], [bigint], "view">;

  ethTransferGasLimit: TypedContractMethod<[], [bigint], "view">;

  executeDecreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeDecreasePositions: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeIncreasePosition: TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeIncreasePositions: TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getRequestKey: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;

  getRequestQueueLengths: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  increasePositionBufferBps: TypedContractMethod<[], [bigint], "view">;

  increasePositionHandler: TypedContractMethod<[], [string], "view">;

  increasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  increasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  increasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        poolToken: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;

  increasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  isLeverageEnabled: TypedContractMethod<[], [boolean], "view">;

  isMulticaller: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPositionKeeper: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxGlobalLongSize: TypedContractMethod<
    [_poolToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  maxGlobalShortSize: TypedContractMethod<
    [_poolToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  maxTimeDelay: TypedContractMethod<[], [bigint], "view">;

  minBlockDelayKeeper: TypedContractMethod<[], [bigint], "view">;

  minExecutionFee: TypedContractMethod<[], [bigint], "view">;

  minTimeDelayPublic: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  referralStorage: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setDataBase: TypedContractMethod<
    [_dataBase: AddressLike],
    [void],
    "nonpayable"
  >;

  setDecreasePositionHandler: TypedContractMethod<
    [_positionHandler: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelayValues: TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setIncreasePositionHandler: TypedContractMethod<
    [_positionHandler: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinExecutionFee: TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMulticaller: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  setPositionKeeper: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setPricesAndExecute: TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: BigNumberish[],
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPricesMMAndExecute: TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: PriceLib.PricesStruct[],
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setReferralStorage: TypedContractMethod<
    [_referralStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelDecreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelIncreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDecreasePosition"
  ): TypedContractMethod<
    [_decRequestIn: PositionRouter.DecreasePositionRequestInStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreasePositionTpSl"
  ): TypedContractMethod<
    [_incRequestIn: PositionRouter.IncreasePositionRequestInStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "customCallbackGasLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataBase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreasePositionHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        poolToken: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ethTransferGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeDecreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreasePositions"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePosition"
  ): TypedContractMethod<
    [_key: BytesLike, _executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePositions"
  ): TypedContractMethod<
    [_endIndex: BigNumberish, _executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRequestKey"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestQueueLengths"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionBufferBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        account: string;
        poolToken: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isLeverageEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMulticaller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPositionKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxGlobalLongSize"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxGlobalShortSize"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxTimeDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBlockDelayKeeper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minExecutionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimeDelayPublic"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataBase"
  ): TypedContractMethod<[_dataBase: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDecreasePositionHandler"
  ): TypedContractMethod<[_positionHandler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelayValues"
  ): TypedContractMethod<
    [
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncreasePositionHandler"
  ): TypedContractMethod<[_positionHandler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinExecutionFee"
  ): TypedContractMethod<
    [_minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMulticaller"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPositionKeeper"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPricesAndExecute"
  ): TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: BigNumberish[],
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPricesMMAndExecute"
  ): TypedContractMethod<
    [
      _tokens: AddressLike[],
      _prices: PriceLib.PricesStruct[],
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReferralStorage"
  ): TypedContractMethod<[_referralStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Callback"
  ): TypedContractEvent<
    CallbackEvent.InputTuple,
    CallbackEvent.OutputTuple,
    CallbackEvent.OutputObject
  >;
  getEvent(
    key: "CancelDecreasePosition"
  ): TypedContractEvent<
    CancelDecreasePositionEvent.InputTuple,
    CancelDecreasePositionEvent.OutputTuple,
    CancelDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CancelIncreasePosition"
  ): TypedContractEvent<
    CancelIncreasePositionEvent.InputTuple,
    CancelIncreasePositionEvent.OutputTuple,
    CancelIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateDecreasePosition"
  ): TypedContractEvent<
    CreateDecreasePositionEvent.InputTuple,
    CreateDecreasePositionEvent.OutputTuple,
    CreateDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateIncreasePosition"
  ): TypedContractEvent<
    CreateIncreasePositionEvent.InputTuple,
    CreateIncreasePositionEvent.OutputTuple,
    CreateIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteDecreasePosition"
  ): TypedContractEvent<
    ExecuteDecreasePositionEvent.InputTuple,
    ExecuteDecreasePositionEvent.OutputTuple,
    ExecuteDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteIncreasePosition"
  ): TypedContractEvent<
    ExecuteIncreasePositionEvent.InputTuple,
    ExecuteIncreasePositionEvent.OutputTuple,
    ExecuteIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "IncreasePoolAmount"
  ): TypedContractEvent<
    IncreasePoolAmountEvent.InputTuple,
    IncreasePoolAmountEvent.OutputTuple,
    IncreasePoolAmountEvent.OutputObject
  >;
  getEvent(
    key: "InvalidIncreaseEvent"
  ): TypedContractEvent<
    InvalidIncreaseEventEvent.InputTuple,
    InvalidIncreaseEventEvent.OutputTuple,
    InvalidIncreaseEventEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetDataBase"
  ): TypedContractEvent<
    SetDataBaseEvent.InputTuple,
    SetDataBaseEvent.OutputTuple,
    SetDataBaseEvent.OutputObject
  >;
  getEvent(
    key: "SetDecreasePositionHandler"
  ): TypedContractEvent<
    SetDecreasePositionHandlerEvent.InputTuple,
    SetDecreasePositionHandlerEvent.OutputTuple,
    SetDecreasePositionHandlerEvent.OutputObject
  >;
  getEvent(
    key: "SetDelayValues"
  ): TypedContractEvent<
    SetDelayValuesEvent.InputTuple,
    SetDelayValuesEvent.OutputTuple,
    SetDelayValuesEvent.OutputObject
  >;
  getEvent(
    key: "SetIncreasePositionHandler"
  ): TypedContractEvent<
    SetIncreasePositionHandlerEvent.InputTuple,
    SetIncreasePositionHandlerEvent.OutputTuple,
    SetIncreasePositionHandlerEvent.OutputObject
  >;
  getEvent(
    key: "SetMinExecutionFee"
  ): TypedContractEvent<
    SetMinExecutionFeeEvent.InputTuple,
    SetMinExecutionFeeEvent.OutputTuple,
    SetMinExecutionFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetMulticaller"
  ): TypedContractEvent<
    SetMulticallerEvent.InputTuple,
    SetMulticallerEvent.OutputTuple,
    SetMulticallerEvent.OutputObject
  >;
  getEvent(
    key: "SetOracle"
  ): TypedContractEvent<
    SetOracleEvent.InputTuple,
    SetOracleEvent.OutputTuple,
    SetOracleEvent.OutputObject
  >;
  getEvent(
    key: "SetPositionKeeper"
  ): TypedContractEvent<
    SetPositionKeeperEvent.InputTuple,
    SetPositionKeeperEvent.OutputTuple,
    SetPositionKeeperEvent.OutputObject
  >;
  getEvent(
    key: "SetReferralStorage"
  ): TypedContractEvent<
    SetReferralStorageEvent.InputTuple,
    SetReferralStorageEvent.OutputTuple,
    SetReferralStorageEvent.OutputObject
  >;

  filters: {
    "Callback(address,bool,uint256)": TypedContractEvent<
      CallbackEvent.InputTuple,
      CallbackEvent.OutputTuple,
      CallbackEvent.OutputObject
    >;
    Callback: TypedContractEvent<
      CallbackEvent.InputTuple,
      CallbackEvent.OutputTuple,
      CallbackEvent.OutputObject
    >;

    "CancelDecreasePosition(address,address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CancelDecreasePositionEvent.InputTuple,
      CancelDecreasePositionEvent.OutputTuple,
      CancelDecreasePositionEvent.OutputObject
    >;
    CancelDecreasePosition: TypedContractEvent<
      CancelDecreasePositionEvent.InputTuple,
      CancelDecreasePositionEvent.OutputTuple,
      CancelDecreasePositionEvent.OutputObject
    >;

    "CancelIncreasePosition(address,address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CancelIncreasePositionEvent.InputTuple,
      CancelIncreasePositionEvent.OutputTuple,
      CancelIncreasePositionEvent.OutputObject
    >;
    CancelIncreasePosition: TypedContractEvent<
      CancelIncreasePositionEvent.InputTuple,
      CancelIncreasePositionEvent.OutputTuple,
      CancelIncreasePositionEvent.OutputObject
    >;

    "CreateDecreasePosition(address,address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;
    CreateDecreasePosition: TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;

    "CreateIncreasePosition(address,address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;
    CreateIncreasePosition: TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;

    "ExecuteDecreasePosition(address,address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;
    ExecuteDecreasePosition: TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;

    "ExecuteIncreasePosition(address,address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;
    ExecuteIncreasePosition: TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;

    "IncreasePoolAmount(address,address,uint256)": TypedContractEvent<
      IncreasePoolAmountEvent.InputTuple,
      IncreasePoolAmountEvent.OutputTuple,
      IncreasePoolAmountEvent.OutputObject
    >;
    IncreasePoolAmount: TypedContractEvent<
      IncreasePoolAmountEvent.InputTuple,
      IncreasePoolAmountEvent.OutputTuple,
      IncreasePoolAmountEvent.OutputObject
    >;

    "InvalidIncreaseEvent(address,address,uint256,uint256)": TypedContractEvent<
      InvalidIncreaseEventEvent.InputTuple,
      InvalidIncreaseEventEvent.OutputTuple,
      InvalidIncreaseEventEvent.OutputObject
    >;
    InvalidIncreaseEvent: TypedContractEvent<
      InvalidIncreaseEventEvent.InputTuple,
      InvalidIncreaseEventEvent.OutputTuple,
      InvalidIncreaseEventEvent.OutputObject
    >;

    "SetAdmin(address)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetDataBase(address)": TypedContractEvent<
      SetDataBaseEvent.InputTuple,
      SetDataBaseEvent.OutputTuple,
      SetDataBaseEvent.OutputObject
    >;
    SetDataBase: TypedContractEvent<
      SetDataBaseEvent.InputTuple,
      SetDataBaseEvent.OutputTuple,
      SetDataBaseEvent.OutputObject
    >;

    "SetDecreasePositionHandler(address)": TypedContractEvent<
      SetDecreasePositionHandlerEvent.InputTuple,
      SetDecreasePositionHandlerEvent.OutputTuple,
      SetDecreasePositionHandlerEvent.OutputObject
    >;
    SetDecreasePositionHandler: TypedContractEvent<
      SetDecreasePositionHandlerEvent.InputTuple,
      SetDecreasePositionHandlerEvent.OutputTuple,
      SetDecreasePositionHandlerEvent.OutputObject
    >;

    "SetDelayValues(uint256,uint256,uint256)": TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;
    SetDelayValues: TypedContractEvent<
      SetDelayValuesEvent.InputTuple,
      SetDelayValuesEvent.OutputTuple,
      SetDelayValuesEvent.OutputObject
    >;

    "SetIncreasePositionHandler(address)": TypedContractEvent<
      SetIncreasePositionHandlerEvent.InputTuple,
      SetIncreasePositionHandlerEvent.OutputTuple,
      SetIncreasePositionHandlerEvent.OutputObject
    >;
    SetIncreasePositionHandler: TypedContractEvent<
      SetIncreasePositionHandlerEvent.InputTuple,
      SetIncreasePositionHandlerEvent.OutputTuple,
      SetIncreasePositionHandlerEvent.OutputObject
    >;

    "SetMinExecutionFee(uint256)": TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;
    SetMinExecutionFee: TypedContractEvent<
      SetMinExecutionFeeEvent.InputTuple,
      SetMinExecutionFeeEvent.OutputTuple,
      SetMinExecutionFeeEvent.OutputObject
    >;

    "SetMulticaller(address,bool)": TypedContractEvent<
      SetMulticallerEvent.InputTuple,
      SetMulticallerEvent.OutputTuple,
      SetMulticallerEvent.OutputObject
    >;
    SetMulticaller: TypedContractEvent<
      SetMulticallerEvent.InputTuple,
      SetMulticallerEvent.OutputTuple,
      SetMulticallerEvent.OutputObject
    >;

    "SetOracle(address)": TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;
    SetOracle: TypedContractEvent<
      SetOracleEvent.InputTuple,
      SetOracleEvent.OutputTuple,
      SetOracleEvent.OutputObject
    >;

    "SetPositionKeeper(address,bool)": TypedContractEvent<
      SetPositionKeeperEvent.InputTuple,
      SetPositionKeeperEvent.OutputTuple,
      SetPositionKeeperEvent.OutputObject
    >;
    SetPositionKeeper: TypedContractEvent<
      SetPositionKeeperEvent.InputTuple,
      SetPositionKeeperEvent.OutputTuple,
      SetPositionKeeperEvent.OutputObject
    >;

    "SetReferralStorage(address)": TypedContractEvent<
      SetReferralStorageEvent.InputTuple,
      SetReferralStorageEvent.OutputTuple,
      SetReferralStorageEvent.OutputObject
    >;
    SetReferralStorage: TypedContractEvent<
      SetReferralStorageEvent.InputTuple,
      SetReferralStorageEvent.OutputTuple,
      SetReferralStorageEvent.OutputObject
    >;
  };
}
