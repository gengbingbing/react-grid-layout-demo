/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PoolLib {
  export type PropsStruct = {
    poolToken: AddressLike;
    indexToken: AddressLike;
    longToken: AddressLike;
    shortToken: AddressLike;
  };

  export type PropsStructOutput = [
    poolToken: string,
    indexToken: string,
    longToken: string,
    shortToken: string
  ] & {
    poolToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace PositionLib {
  export type PositionStruct = {
    account: AddressLike;
    poolToken: AddressLike;
    indexToken: AddressLike;
    collateralToken: AddressLike;
    size: BigNumberish;
    collateral: BigNumberish;
    averagePrice: BigNumberish;
    entryFundingRate: BigNumberish;
    reserveAmount: BigNumberish;
    realisedPnl: BigNumberish;
    lastIncreasedTime: BigNumberish;
    isLong: boolean;
  };

  export type PositionStructOutput = [
    account: string,
    poolToken: string,
    indexToken: string,
    collateralToken: string,
    size: bigint,
    collateral: bigint,
    averagePrice: bigint,
    entryFundingRate: bigint,
    reserveAmount: bigint,
    realisedPnl: bigint,
    lastIncreasedTime: bigint,
    isLong: boolean
  ] & {
    account: string;
    poolToken: string;
    indexToken: string;
    collateralToken: string;
    size: bigint;
    collateral: bigint;
    averagePrice: bigint;
    entryFundingRate: bigint;
    reserveAmount: bigint;
    realisedPnl: bigint;
    lastIncreasedTime: bigint;
    isLong: boolean;
  };
}

export declare namespace PositionDao {
  export type PositionOutStruct = {
    key: BytesLike;
    poolToken: AddressLike;
    indexToken: AddressLike;
    collateralToken: AddressLike;
    isLong: boolean;
    size: BigNumberish;
    collateral: BigNumberish;
    averagePrice: BigNumberish;
    entryFundingRate: BigNumberish;
    hasRealisedProfit: boolean;
    realisedPnl: BigNumberish;
    lastIncreasedTime: BigNumberish;
    hasProfit: boolean;
    profitDelta: BigNumberish;
    entryLongScaleRate: BigNumberish;
    entryShortScaleRate: BigNumberish;
    fundingFee: BigNumberish;
  };

  export type PositionOutStructOutput = [
    key: string,
    poolToken: string,
    indexToken: string,
    collateralToken: string,
    isLong: boolean,
    size: bigint,
    collateral: bigint,
    averagePrice: bigint,
    entryFundingRate: bigint,
    hasRealisedProfit: boolean,
    realisedPnl: bigint,
    lastIncreasedTime: bigint,
    hasProfit: boolean,
    profitDelta: bigint,
    entryLongScaleRate: bigint,
    entryShortScaleRate: bigint,
    fundingFee: bigint
  ] & {
    key: string;
    poolToken: string;
    indexToken: string;
    collateralToken: string;
    isLong: boolean;
    size: bigint;
    collateral: bigint;
    averagePrice: bigint;
    entryFundingRate: bigint;
    hasRealisedProfit: boolean;
    realisedPnl: bigint;
    lastIncreasedTime: bigint;
    hasProfit: boolean;
    profitDelta: bigint;
    entryLongScaleRate: bigint;
    entryShortScaleRate: bigint;
    fundingFee: bigint;
  };
}

export interface StableCoinReaderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cumulativeFees"
      | "fundingRateFactor"
      | "getAccountPositionCount"
      | "getAccountPositionKeys"
      | "getAum"
      | "getAumInUsdg"
      | "getFundingRates"
      | "getPool"
      | "getPoolAddresses"
      | "getPoolAddressesMini"
      | "getPoolBalances"
      | "getPoolPositionCount"
      | "getPoolPositionKeys"
      | "getPoolTokens"
      | "getPoolsMini"
      | "getPosition"
      | "getPositionSize"
      | "getPositionSizeByKey"
      | "getPositions"
      | "stableFundingRateFactor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cumulativeFees",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRateFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositionCount",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositionKeys",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAum",
    values: [AddressLike, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAumInUsdg",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingRates",
    values: [AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddresses",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddressesMini",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPositionCount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPositionKeys",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsMini",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSizeByKey",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFundingRateFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cumulativeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositionKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAumInUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddressesMini",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPositionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPositionKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsMini",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSizeByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFundingRateFactor",
    data: BytesLike
  ): Result;
}

export interface StableCoinReader extends BaseContract {
  connect(runner?: ContractRunner | null): StableCoinReader;
  waitForDeployment(): Promise<this>;

  interface: StableCoinReaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cumulativeFees: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  fundingRateFactor: TypedContractMethod<[], [bigint], "view">;

  getAccountPositionCount: TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [bigint],
    "view"
  >;

  getAccountPositionKeys: TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [string[]],
    "view"
  >;

  getAum: TypedContractMethod<
    [
      _dataBase: AddressLike,
      _poolToken: AddressLike,
      _tokens: AddressLike[],
      _prices: BigNumberish[]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getAumInUsdg: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike, _maximize: boolean],
    [bigint],
    "view"
  >;

  getFundingRates: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike, _tokens: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getPool: TypedContractMethod<
    [_dataBase: AddressLike, _poolAddress: AddressLike],
    [PoolLib.PropsStructOutput],
    "view"
  >;

  getPoolAddresses: TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [string[]],
    "view"
  >;

  getPoolAddressesMini: TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [string[]],
    "view"
  >;

  getPoolBalances: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[string[], bigint[], bigint[], bigint[], bigint[], bigint[]]],
    "view"
  >;

  getPoolPositionCount: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [bigint],
    "view"
  >;

  getPoolPositionKeys: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [string[]],
    "view"
  >;

  getPoolTokens: TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[string[], string[]]],
    "view"
  >;

  getPoolsMini: TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [PoolLib.PropsStructOutput[]],
    "view"
  >;

  getPosition: TypedContractMethod<
    [_dataBase: AddressLike, _key: BytesLike],
    [PositionLib.PositionStructOutput],
    "view"
  >;

  getPositionSize: TypedContractMethod<
    [
      _dataBase: AddressLike,
      _account: AddressLike,
      _poolToken: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean
    ],
    [bigint],
    "view"
  >;

  getPositionSizeByKey: TypedContractMethod<
    [_dataBase: AddressLike, _posKey: BytesLike],
    [bigint],
    "view"
  >;

  getPositions: TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [PositionDao.PositionOutStructOutput[]],
    "view"
  >;

  stableFundingRateFactor: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cumulativeFees"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundingRateFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountPositionCount"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountPositionKeys"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAum"
  ): TypedContractMethod<
    [
      _dataBase: AddressLike,
      _poolToken: AddressLike,
      _tokens: AddressLike[],
      _prices: BigNumberish[]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAumInUsdg"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike, _maximize: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFundingRates"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike, _tokens: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolAddress: AddressLike],
    [PoolLib.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAddresses"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAddressesMini"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolBalances"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[string[], bigint[], bigint[], bigint[], bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolPositionCount"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolPositionKeys"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolTokens"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _poolToken: AddressLike],
    [[string[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolsMini"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _start: BigNumberish, _end: BigNumberish],
    [PoolLib.PropsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _key: BytesLike],
    [PositionLib.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionSize"
  ): TypedContractMethod<
    [
      _dataBase: AddressLike,
      _account: AddressLike,
      _poolToken: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionSizeByKey"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _posKey: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositions"
  ): TypedContractMethod<
    [_dataBase: AddressLike, _account: AddressLike, _poolToken: AddressLike],
    [PositionDao.PositionOutStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "stableFundingRateFactor"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
